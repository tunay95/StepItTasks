// <auto-generated />
using System;
using AdoNetExamProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdoNetExamProject.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250315084833_User Password MinValue Check Constraint has been added to User Table")]
    partial class UserPasswordMinValueCheckConstrainthasbeenaddedtoUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AdoNetExamProject.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories", t =>
                        {
                            t.HasCheckConstraint("CK_CategoryName_MinValue", "LEN([Name]) >= 3");
                        });
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId", "Text")
                        .IsUnique()
                        .HasFilter("[QuestionId] IS NOT NULL");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("QuizName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("QuizName")
                        .IsUnique();

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("UserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("User");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("CK_BirthDate", "YEAR(BirthDate) BETWEEN 1950 AND 2015");

                            t.HasCheckConstraint("CK_FirstName_MinValue", "LEN([FirstName]) >= 3");

                            t.HasCheckConstraint("CK_LastName_MinValue", "LEN([LastName]) >= 3");

                            t.HasCheckConstraint("CK_Password_MinValue", "LEN([Password]) >= 6");

                            t.HasCheckConstraint("CK_Username_MinValue", "LEN([Username]) >= 5");
                        });
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.UserQuiz", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("CorrectAnswerCount")
                        .HasColumnType("int");

                    b.Property<int>("PassedAnswerCount")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<double>("SuccessRate")
                        .HasColumnType("float");

                    b.Property<int>("WrongAnswerCount")
                        .HasColumnType("int");

                    b.HasKey("UserId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("UserQuizzes", t =>
                        {
                            t.HasCheckConstraint("CK_CorrectAnswerCount", "CorrectAnswerCount BETWEEN 0 AND 20");

                            t.HasCheckConstraint("CK_PassedAnswerCount", "PassedAnswerCount BETWEEN 0 AND 20");

                            t.HasCheckConstraint("CK_Passed_Wrong_Correct", "PassedAnswerCount + WrongAnswerCount + CorrectAnswerCount = 20");

                            t.HasCheckConstraint("CK_Rank", "Rank >= 0");

                            t.HasCheckConstraint("CK_SuccessRate", "SuccessRate BETWEEN 0.0 AND 100.0");

                            t.HasCheckConstraint("CK_WrongAnswerCount", "WrongAnswerCount BETWEEN 0 AND 20");
                        });
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<string>("Statement")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("Statement")
                        .IsUnique();

                    b.ToTable("Questions", t =>
                        {
                            t.HasCheckConstraint("CK_Statement_MinValue", "LEN([Statement]) >= 3");
                        });

                    b.HasDiscriminator<string>("QuestionType").HasValue("Question");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FillTheGap", b =>
                {
                    b.HasBaseType("Question");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Statement_MinValue", "LEN([Statement]) >= 3");
                        });

                    b.HasDiscriminator().HasValue("OpenEndedQuestion");
                });

            modelBuilder.Entity("FourOptionQuestion", b =>
                {
                    b.HasBaseType("Question");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Statement_MinValue", "LEN([Statement]) >= 3");
                        });

                    b.HasDiscriminator().HasValue("FourOptionQuestion");
                });

            modelBuilder.Entity("MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("Question");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Statement_MinValue", "LEN([Statement]) >= 3");
                        });

                    b.HasDiscriminator().HasValue("MultipleChoiceQuestion");
                });

            modelBuilder.Entity("TrueFalseQuestion", b =>
                {
                    b.HasBaseType("Question");

                    b.ToTable(t =>
                        {
                            t.HasCheckConstraint("CK_Statement_MinValue", "LEN([Statement]) >= 3");
                        });

                    b.HasDiscriminator().HasValue("TrueFalseQuestion");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.Option", b =>
                {
                    b.HasOne("Question", "Question")
                        .WithMany("OptionsList")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Questions");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.Quiz", b =>
                {
                    b.HasOne("AdoNetExamProject.Entities.Category", "Category")
                        .WithMany("Quizzes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.UserQuiz", b =>
                {
                    b.HasOne("AdoNetExamProject.Entities.Quiz", "Quiz")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Quizzes_UserQuizzes");

                    b.HasOne("AdoNetExamProject.Entities.User", "User")
                        .WithMany("UserQuizzes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Users");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.HasOne("AdoNetExamProject.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Quizzes_Questions");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.Category", b =>
                {
                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserQuizzes");
                });

            modelBuilder.Entity("AdoNetExamProject.Entities.User", b =>
                {
                    b.Navigation("UserQuizzes");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Navigation("OptionsList");
                });
#pragma warning restore 612, 618
        }
    }
}
